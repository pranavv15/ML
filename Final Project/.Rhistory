library(dplyr)
library(tidyverse)
library(DataExplorer)
library(purrr)
library(cluster)    # clustering algorithms
library(factoextra)
library(tibble)
library(ggplot2)
library(highcharter)
# Read the data file
data <- read.csv(file.choose(), header = T)
data['160', "country"] <- "United States of America"
# Data exploration
# Remove country column
data_num <- data %>% select(-c(country))
## Check missng values
plot_intro(data, title="Missing Values")
## Child Mortality Distribution
hist(data_num$child_mort, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Child Mortality",
main = "Child Mortality Distribution")
lines(density(data_num$child_mort), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## Exports Distribution
hist(data_num$exports, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Exports",
main = "Exports Distribution")
lines(density(data_num$exports), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## Health Distribution
hist(data_num$health, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Health",
main = "Health Distribution")
lines(density(data_num$health), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## Imports Distribution
hist(data_num$imports, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Imports",
main = "Imports Distribution")
lines(density(data_num$imports), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## Life Expectancy Distribution
hist(data_num$life_expec, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Life Expectancy",
main = "Life Expectancy")
lines(density(data_num$life_expec), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## Total Fertility Distribution
hist(data_num$total_fer, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Total Fertility",
main = "Fertility Distribution")
lines(density(data_num$total_fer), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## GDPP Distribution
hist(data_num$gdpp, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "GDP",
main = "GDP Distribution")
lines(density(data_num$gdpp), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## Income Distribution
hist(data_num$income, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Income",
main = "Income Distribution")
lines(density(data_num$income), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
## World map of child mortality of various nations
hc <- highchart() %>%
hc_add_series_map(
worldgeojson, orig_data, value = "child_mort", joinBy = c('name','country'),
name = "Child Mortality of Various Nations"
)  %>%
hc_colorAxis(minColor = "#ff7b7b", maxColor = "#a70000") %>%
hc_title(text = "Child Mortality of Various Nations")
hc
## World map of gdpp of various nations
hc <- highchart() %>%
hc_add_series_map(
worldgeojson, orig_data, value = "gdpp", joinBy = c('name','country'),
name = "GDP Per Capita of Various Nations"
)  %>%
hc_colorAxis(minColor = "#66b2b2", maxColor = "#006666") %>%
hc_title(text = "GDP Per Capita of Various Nations")
orig_data <- data
## World map of child mortality of various nations
hc <- highchart() %>%
hc_add_series_map(
worldgeojson, orig_data, value = "child_mort", joinBy = c('name','country'),
name = "Child Mortality of Various Nations"
)  %>%
hc_colorAxis(minColor = "#ff7b7b", maxColor = "#a70000") %>%
hc_title(text = "Child Mortality of Various Nations")
hc
## World map of gdpp of various nations
hc <- highchart() %>%
hc_add_series_map(
worldgeojson, orig_data, value = "gdpp", joinBy = c('name','country'),
name = "GDP Per Capita of Various Nations"
)  %>%
hc_colorAxis(minColor = "#66b2b2", maxColor = "#006666") %>%
hc_title(text = "GDP Per Capita of Various Nations")
hc
## World map of Total Fertility of various nations
hc <- highchart() %>%
hc_add_series_map(
worldgeojson, orig_data, value = "total_fer", joinBy = c('name','country'),
name = "Total Fertility of Various Nations"
)  %>%
hc_colorAxis(minColor = "#980F5A", maxColor = "#4C0027") %>%
hc_title(text = "Total Fertility of Various Nations")
hc
## Income Level Distribution of various nations
hc <- highchart() %>%
hc_add_series_map(
worldgeojson, orig_data, value = "income", joinBy = c('name','country'),
name = "Income Level Distribution of various nations"
)  %>%
hc_colorAxis(minColor = "#E5EFC1", maxColor = "#557B83") %>%
hc_title(text = "Income Level Distribution of various nations")
hc
# Make country names into row names/id
rownames(data) <- data[,1]
data[,1] <- NULL
data_scaled <- scale(data)
par(mfrow=c(1,1))
# Elbow Method
set.seed(490)
fv_nbclust(data_scaled,kmeans,method = 'wss')
fv_nbclust(data_scaled,kmeans,method = 'wss')
library(factoextra)
# Elbow Method
set.seed(490)
fv_nbclust(data_scaled,kmeans,method = 'wss')
# Silhouette Method
fviz_nbclust(data_scaled, kmeans, method = "silhouette")
#compute gap statistic
gap_stat <- clusGap(data_scaled, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Print the result
print(gap_stat, method = "firstmax")
fviz_gap_stat(gap_stat)
# K means using 4 clusters
final <- kmeans(data_scaled, 4, nstart = 25)
print(final)
fviz_cluster(final, data = data_scaled)
data_final <- data_scaled
rownames(data_final) <- orig_data$country
final$cluster
cluster_data <- as.data.frame(final$cluster)
head(cluster_data)
# K Means using 3 clusters
final <- kmeans(data_final, 3, nstart = 25)
print(final)
fviz_cluster(final, data = data_final)
cluster_data <- as.data.frame(final$cluster)
head(cluster_data)
total_data <- cbind(orig_data,cluster = final$cluster)
head(total_data)
colnames(total_data)[11] <- "cluster"
colnames(total_data)
aggregate(total_data[, 2:10], list(total_data$cluster), mean)
str(total_data)
# Multiple conditions when adding new column to dataframe:
total_data <- total_data %>% mutate(group =
case_when(cluster == 1 ~ 2,
cluster == 2 ~ 1,
cluster == 3 ~ 3)
)
# Plot Map
total_data$cluster <- as.numeric(total_data$cluster)
hc <- highchart() %>%
hc_add_series_map(
worldgeojson, total_data, value = "group", joinBy = c('name','country'),
name = "Help"
)  %>%
hc_colorAxis(stops = color_stops()) %>%
hc_title(text = "World Map") %>%
hc_subtitle(text = "Yellow = No Risk, Blue = High Risk, Green = Medium Risk ")
hc
# Kmeans using PCA
new_data <- pc[["x"]]
?fv_nbclust
